<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.datagear.management.domain.DataSetEntity">

	<insert id="insert">
		INSERT INTO DATAGEAR_DATA_SET
			(
				DS_ID, DS_NAME, DS_TYPE, DS_CREATE_USER_ID, DS_CREATE_TIME,
				DS_AP_ID, DS_DATA_FORMAT, DS_MUTABLE_MODEL, DS_DESC
			)
		VALUES
			(
				#{entity.id}, #{entity.name}, #{entity.dataSetType}, #{entity.createUser.id}, #{entity.createTime},
				#{entity.analysisProject.id, jdbcType=VARCHAR}, #{entity.dataFormat, jdbcType=VARCHAR},
				#{entity.mutableModel, jdbcType=VARCHAR}, #{entity.description, jdbcType=VARCHAR}
			)
	</insert>
	
	<insert id="insertFieldPO">
		INSERT INTO DATAGEAR_DATA_SET_PROP
			(
			PROP_DS_ID, PROP_NAME, PROP_TYPE, PROP_LABEL,
			PROP_DFT_VALUE, PROP_EVALUATED, PROP_EXPRESSION,
			PROP_ORDER
			)
		VALUES
			(
			#{entity.dataSetId}, #{entity.child.name}, #{entity.child.type}, #{entity.child.label, jdbcType=VARCHAR},
			#{entity.child.defaultValue, jdbcType=VARCHAR}, #{entity.child.evaluated}, #{entity.child.expression, jdbcType=VARCHAR}, 
			#{entity.order}
			)
	</insert>
	
	<insert id="insertParamPO">
		INSERT INTO DATAGEAR_DATA_SET_PAR
			(
			PAR_DS_ID, PAR_NAME, PAR_TYPE, PAR_REQUIRED, PAR_DESC,
			PAR_INPUT_TYPE, PAR_INPUT_PAYLOAD, PAR_ORDER
			)
		VALUES
			(
			#{entity.dataSetId}, #{entity.child.name}, #{entity.child.type}, #{entity.child.required}, #{entity.child.desc, jdbcType=VARCHAR},
			 #{entity.child.inputType, jdbcType=VARCHAR}, #{entity.child.inputPayload, jdbcType=VARCHAR}, #{entity.order}
			)
	</insert>
	
	<update id="update">
		UPDATE DATAGEAR_DATA_SET SET
			DS_NAME = #{entity.name},
			DS_AP_ID = #{entity.analysisProject.id, jdbcType=VARCHAR},
			DS_DATA_FORMAT = #{entity.dataFormat, jdbcType=VARCHAR},
			DS_MUTABLE_MODEL = #{entity.mutableModel, jdbcType=VARCHAR},
			DS_DESC = #{entity.description, jdbcType=VARCHAR}
		WHERE
			DS_ID = #{entity.id}
	</update>
	
	<update id="updateCreateUserId">
		UPDATE DATAGEAR_DATA_SET SET
			DS_CREATE_USER_ID = #{newUserId}
		WHERE
			DS_CREATE_USER_ID  IN
			<foreach item="item" index="index" collection="oldUserIds" open="(" separator="," close=")">
			#{item}
			</foreach>
	</update>
	
	<delete id="deleteById">
		DELETE FROM DATAGEAR_DATA_SET
		WHERE
			DS_ID = #{id}
	</delete>
	
	<delete id="deleteFieldPOs">
		DELETE FROM DATAGEAR_DATA_SET_PROP
		WHERE
			PROP_DS_ID = #{dataSetId}
	</delete>
	
	<delete id="deleteParamPOs">
		DELETE FROM DATAGEAR_DATA_SET_PAR
		WHERE
			PAR_DS_ID = #{dataSetId}
	</delete>
	
	<select id="getById" resultType="org.datagear.management.domain.SummaryDataSetEntity">
		SELECT
			T.*
		FROM
			(<include refid="queryViewDataPermission" />) T
		WHERE
			T.${_iq_}id${_iq_} = #{id}
	</select>
	
	<select id="getFieldPOs" resultType="org.datagear.management.service.impl.DataSetEntityServiceImpl$DataSetFieldPO">
		SELECT
			PROP_DS_ID AS ${_iq_}dataSetId${_iq_},
			PROP_NAME AS ${_iq_}child.name${_iq_},
			PROP_TYPE AS ${_iq_}child.type${_iq_},
			PROP_LABEL AS ${_iq_}child.label${_iq_},
			PROP_DFT_VALUE AS ${_iq_}child.defaultValue${_iq_},
			PROP_EVALUATED AS ${_iq_}child.evaluated${_iq_},
			PROP_EXPRESSION AS ${_iq_}child.expression${_iq_},
			PROP_ORDER AS ${_iq_}order${_iq_}
		FROM
			DATAGEAR_DATA_SET_PROP
		WHERE
			PROP_DS_ID = #{dataSetId}
		ORDER BY
			PROP_ORDER ASC
	</select>
	
	<select id="getParamPOs" resultType="org.datagear.management.service.impl.DataSetEntityServiceImpl$DataSetParamPO">
		SELECT
			PAR_DS_ID AS ${_iq_}dataSetId${_iq_},
			PAR_NAME AS ${_iq_}child.name${_iq_},
			PAR_TYPE AS ${_iq_}child.type${_iq_},
			PAR_REQUIRED AS ${_iq_}child.required${_iq_},
			PAR_DESC AS ${_iq_}child.desc${_iq_},
			PAR_INPUT_TYPE AS ${_iq_}child.inputType${_iq_},
			PAR_INPUT_PAYLOAD AS ${_iq_}child.inputPayload${_iq_}, 
			PAR_ORDER AS ${_iq_}order${_iq_}
		FROM
			DATAGEAR_DATA_SET_PAR
		WHERE
			PAR_DS_ID = #{dataSetId}
		ORDER BY
			PAR_ORDER ASC
	</select>
	
	<select id="getDataIdPermissions" resultType="org.datagear.management.domain.DataIdPermission">
		SELECT
			T.DATA_ID as ${_iq_}dataId${_iq_},
			T.DATA_PERMISSION as ${_iq_}dataPermission${_iq_}
		FROM
			(<include refid="queryViewDataIdPermission" />) T
		WHERE
			<foreach item="item" collection="ids" separator=" OR ">T.DATA_ID = #{item}</foreach>
	</select>
	
	<select id="query" resultType="org.datagear.management.domain.SummaryDataSetEntity">
		SELECT
			T.*
		FROM
			(<include refid="queryViewDataPermission" />) T
		WHERE
			<include refid="queryCondition" />
		<include refid="common.queryOrder" />
	</select>
	
	<select id="pagingQueryCount" resultType="int">
		SELECT
			COUNT(*)
		FROM
			(<include refid="queryViewDataPermission" />) T
		WHERE
			<include refid="queryCondition" />
	</select>
	
	<select id="pagingQuery" resultType="org.datagear.management.domain.SummaryDataSetEntity">
		<include refid="common.pagingQueryHead" />
			SELECT
				T.*
			FROM
				(<include refid="queryViewDataPermission" />) T
			WHERE
				<include refid="queryCondition" />
			<include refid="common.queryOrder" />
		<include refid="common.pagingQueryFoot" />
	</select>
	
	<sql id="queryViewDataPermission">
		<choose><when test="DP_CURRENT_USER == null">
		<include refid="queryView" />
		</when><otherwise>
		SELECT
			T0.*,
			T1.DATA_PERMISSION as ${_iq_}dataPermission${_iq_}
		FROM
			(<include refid="queryView" />) T0
		INNER JOIN
			(<include refid="queryViewDataIdPermission" />) T1
		ON
			T0.${_iq_}id${_iq_} = T1.DATA_ID
		WHERE
			T1.DATA_PERMISSION IS NOT NULL AND T1.DATA_PERMISSION >= ${DP_MIN_READ_PERMISSION}
		</otherwise></choose>
	</sql>
	
	<sql id="queryViewDataIdPermission">
		SELECT
			T0.DS_ID AS DATA_ID,
			(
				CASE
					WHEN T2.DATA_PERMISSION IS NULL THEN T1.DATA_PERMISSION
					WHEN T1.DATA_PERMISSION >= ${DP_MIN_READ_PERMISSION} THEN T1.DATA_PERMISSION
					ELSE T2.DATA_PERMISSION
				END
			) AS DATA_PERMISSION
		FROM
			DATAGEAR_DATA_SET T0
		LEFT JOIN
			(
				<include refid="commonDataPermission.dataIdPermissionQueryViewHead" />
				<include refid="queryViewDataPermissionId" />
				<include refid="commonDataPermission.dataIdPermissionQueryViewFoot" />
			) T1
		ON
			T0.DS_ID = T1.DATA_ID
		LEFT JOIN
			(
				<include refid="org.datagear.management.domain.AnalysisProject.queryViewIdPermissionForAnalysisProjectAwareEntity" />
			) T2
		ON
			T0.DS_AP_ID = T2.AP_ID
	</sql>
	
	<sql id="queryViewDataPermissionId">
		SELECT
			A.DS_ID AS DP_AUTH_DATA_ID,
			A.DS_CREATE_USER_ID AS DP_AUTH_DATA_CREATOR_ID
		FROM
			DATAGEAR_DATA_SET A
	</sql>
	
	<sql id="queryView">
		SELECT
			A.DS_ID AS ${_iq_}id${_iq_},
			A.DS_NAME AS ${_iq_}name${_iq_},
			A.DS_TYPE AS ${_iq_}dataSetType${_iq_},
			A.DS_CREATE_USER_ID AS ${_iq_}createUser.id${_iq_},
			<include refid="common.fieldsForCreateUser" />,
			A.DS_CREATE_TIME AS ${_iq_}createTime${_iq_},
			A.DS_DATA_FORMAT AS ${_iq_}dataFormat${_iq_},
			A.DS_MUTABLE_MODEL AS ${_iq_}mutableModel${_iq_},
			A.DS_DESC AS ${_iq_}description${_iq_},
			AP.*
		FROM
			DATAGEAR_DATA_SET A
		LEFT JOIN
			DATAGEAR_USER USR
		ON
			A.DS_CREATE_USER_ID = USR.USER_ID
		LEFT JOIN
			(<include refid="org.datagear.management.domain.AnalysisProject.queryViewForAnalysisProjectAwareEntity" />) AP
		ON
			A.DS_AP_ID = AP.${_iq_}analysisProject.id${_iq_}
	</sql>
	
	<sql id="queryCondition">
		1 = 1
		<if test="queryKeyword != null">
		AND
		(
			${_iq_}name${_iq_} LIKE #{queryKeyword}
			OR ${_iq_}description${_iq_} LIKE #{queryKeyword}
			OR ${_iq_}analysisProject.name${_iq_} LIKE #{queryKeyword}
		)
		</if>
		<if test="_analysisProjectId != null">
		AND ${_iq_}analysisProject.id${_iq_} = #{_analysisProjectId}
		</if>
		<include refid="commonDataPermission.dataFilterCondition" />
	</sql>
</mapper>